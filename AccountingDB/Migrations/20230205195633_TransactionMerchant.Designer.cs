// <auto-generated />
using System;
using AccountingDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountingDB.Migrations
{
    [DbContext(typeof(AccountingContext))]
    [Migration("20230205195633_TransactionMerchant")]
    partial class TransactionMerchant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountingDB.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AccountingDB.Models.AccountUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("BankUsers");
                });

            modelBuilder.Entity("AccountingDB.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AccountingDB.Models.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("AccountingDB.Models.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Content")
                        .IsUnique()
                        .HasFilter("[Content] IS NOT NULL");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("AccountingDB.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("FullName")
                        .IsUnique()
                        .HasFilter("[FullName] IS NOT NULL");

                    b.HasIndex("ShortName")
                        .IsUnique()
                        .HasFilter("[ShortName] IS NOT NULL");

                    b.ToTable("States");
                });

            modelBuilder.Entity("AccountingDB.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int?>("MerchantLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostingDate")
                        .HasColumnType("date");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("MerchantLocationId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AccountingDB.Models.TransactionMerchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("MerchantId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("StateId");

                    b.HasIndex("LocationId", "MerchantId", "StateId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL AND [MerchantId] IS NOT NULL AND [StateId] IS NOT NULL");

                    b.ToTable("TransactionMerchants");
                });

            modelBuilder.Entity("AccountingDB.Models.TransactionMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MetaId")
                        .HasColumnType("int");

                    b.Property<int>("MetaType")
                        .HasColumnType("int")
                        .HasComment("Description: 1, Category: 2, Note: 3, Tag: 4, ExtDescription: 5");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MetaId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionMetas");
                });

            modelBuilder.Entity("AccountingDB.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AccountingDB.Models.AccountUser", b =>
                {
                    b.HasOne("AccountingDB.Models.Account", "Account")
                        .WithMany("AccountUser")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingDB.Models.User", "User")
                        .WithMany("AccountUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountingDB.Models.Transaction", b =>
                {
                    b.HasOne("AccountingDB.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingDB.Models.TransactionMerchant", "MerchantLocation")
                        .WithMany("Transactions")
                        .HasForeignKey("MerchantLocationId");

                    b.Navigation("Account");

                    b.Navigation("MerchantLocation");
                });

            modelBuilder.Entity("AccountingDB.Models.TransactionMerchant", b =>
                {
                    b.HasOne("AccountingDB.Models.Location", "Location")
                        .WithMany("TransactionMerchants")
                        .HasForeignKey("LocationId");

                    b.HasOne("AccountingDB.Models.Merchant", "Merchant")
                        .WithMany("TransactionMerchants")
                        .HasForeignKey("MerchantId");

                    b.HasOne("AccountingDB.Models.State", "State")
                        .WithMany("TransactionMerchants")
                        .HasForeignKey("StateId");

                    b.Navigation("Location");

                    b.Navigation("Merchant");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AccountingDB.Models.TransactionMeta", b =>
                {
                    b.HasOne("AccountingDB.Models.Meta", "Meta")
                        .WithMany()
                        .HasForeignKey("MetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingDB.Models.Transaction", "Transaction")
                        .WithMany("TransactionMetas")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meta");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("AccountingDB.Models.Account", b =>
                {
                    b.Navigation("AccountUser");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AccountingDB.Models.Location", b =>
                {
                    b.Navigation("TransactionMerchants");
                });

            modelBuilder.Entity("AccountingDB.Models.Merchant", b =>
                {
                    b.Navigation("TransactionMerchants");
                });

            modelBuilder.Entity("AccountingDB.Models.State", b =>
                {
                    b.Navigation("TransactionMerchants");
                });

            modelBuilder.Entity("AccountingDB.Models.Transaction", b =>
                {
                    b.Navigation("TransactionMetas");
                });

            modelBuilder.Entity("AccountingDB.Models.TransactionMerchant", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AccountingDB.Models.User", b =>
                {
                    b.Navigation("AccountUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
